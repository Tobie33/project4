// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Order         Order[]
  Comment       Comment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id                 Int       @id @default(autoincrement())
  origin             Origin    @relation(fields: [originId], references: [id])
  originId           Int
  name               String
  company            Company   @relation(fields: [companyId], references: [id])
  companyId          Int
  productDescription String
  price              Float
  comments           Comment[]
  images             Image[]
  orders             Order[]
}

model Origin {
  id      Int       @id @default(autoincrement())
  name    String    @db.VarChar(16)
  Product Product[]
}

model Company {
  id      Int       @id @default(autoincrement())
  name    String    @db.VarChar(16)
  Product Product[]
}

model Order {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  delivered Boolean   @default(false)
  products  Product[]
}

model Comment {
  id        Int     @id @default(autoincrement())
  message   String
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  user      User    @relation(fields: [userId], references: [id])
  userId    String
}

model Image {
  id            Int      @id @default(autoincrement())
  productString String
  product       Product? @relation(fields: [productId], references: [id])
  productId     Int?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
